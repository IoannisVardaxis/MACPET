// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/MACPET.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// FilterFastqYield_fun_Rcpp
SEXP FilterFastqYield_fun_Rcpp(int& Curfastqyieldsize, std::vector<std::string>& SreadFastq1, Rcpp::NumericVector& WidthSreadFastq1, std::vector<std::string>& SreadFastq2, Rcpp::NumericVector& WidthSreadFastq2, std::string& S0_LinkerA, std::string& S0_LinkerB, int& S0_LinkerOccurence, int& S0_MinReadLength, int& S0_MaxReadLength);
RcppExport SEXP _MACPET_FilterFastqYield_fun_Rcpp(SEXP CurfastqyieldsizeSEXP, SEXP SreadFastq1SEXP, SEXP WidthSreadFastq1SEXP, SEXP SreadFastq2SEXP, SEXP WidthSreadFastq2SEXP, SEXP S0_LinkerASEXP, SEXP S0_LinkerBSEXP, SEXP S0_LinkerOccurenceSEXP, SEXP S0_MinReadLengthSEXP, SEXP S0_MaxReadLengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int& >::type Curfastqyieldsize(CurfastqyieldsizeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type SreadFastq1(SreadFastq1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type WidthSreadFastq1(WidthSreadFastq1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type SreadFastq2(SreadFastq2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type WidthSreadFastq2(WidthSreadFastq2SEXP);
    Rcpp::traits::input_parameter< std::string& >::type S0_LinkerA(S0_LinkerASEXP);
    Rcpp::traits::input_parameter< std::string& >::type S0_LinkerB(S0_LinkerBSEXP);
    Rcpp::traits::input_parameter< int& >::type S0_LinkerOccurence(S0_LinkerOccurenceSEXP);
    Rcpp::traits::input_parameter< int& >::type S0_MinReadLength(S0_MinReadLengthSEXP);
    Rcpp::traits::input_parameter< int& >::type S0_MaxReadLength(S0_MaxReadLengthSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterFastqYield_fun_Rcpp(Curfastqyieldsize, SreadFastq1, WidthSreadFastq1, SreadFastq2, WidthSreadFastq2, S0_LinkerA, S0_LinkerB, S0_LinkerOccurence, S0_MinReadLength, S0_MaxReadLength));
    return rcpp_result_gen;
END_RCPP
}
// FitCallLocal_fun_Rcpp
SEXP FitCallLocal_fun_Rcpp(Rcpp::DataFrame& bppass_x, Rcpp::DataFrame& ChromInf);
RcppExport SEXP _MACPET_FitCallLocal_fun_Rcpp(SEXP bppass_xSEXP, SEXP ChromInfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame& >::type bppass_x(bppass_xSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame& >::type ChromInf(ChromInfSEXP);
    rcpp_result_gen = Rcpp::wrap(FitCallLocal_fun_Rcpp(bppass_x, ChromInf));
    return rcpp_result_gen;
END_RCPP
}
// Get_PETsInfoMat_fun_Rcpp
SEXP Get_PETsInfoMat_fun_Rcpp(Rcpp::NumericVector const& VEC_query, Rcpp::NumericVector const& VEC_Type, Rcpp::NumericVector const& VEC_Tag, Rcpp::NumericVector const& VEC_LID, Rcpp::NumericVector const& VEC_PeakSummit, int const& NGlobalInterPETs, int const& NIntTagsloop);
static SEXP _MACPET_Get_PETsInfoMat_fun_Rcpp_try(SEXP VEC_querySEXP, SEXP VEC_TypeSEXP, SEXP VEC_TagSEXP, SEXP VEC_LIDSEXP, SEXP VEC_PeakSummitSEXP, SEXP NGlobalInterPETsSEXP, SEXP NIntTagsloopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type VEC_query(VEC_querySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type VEC_Type(VEC_TypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type VEC_Tag(VEC_TagSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type VEC_LID(VEC_LIDSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type VEC_PeakSummit(VEC_PeakSummitSEXP);
    Rcpp::traits::input_parameter< int const& >::type NGlobalInterPETs(NGlobalInterPETsSEXP);
    Rcpp::traits::input_parameter< int const& >::type NIntTagsloop(NIntTagsloopSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_PETsInfoMat_fun_Rcpp(VEC_query, VEC_Type, VEC_Tag, VEC_LID, VEC_PeakSummit, NGlobalInterPETs, NIntTagsloop));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Get_PETsInfoMat_fun_Rcpp(SEXP VEC_querySEXP, SEXP VEC_TypeSEXP, SEXP VEC_TagSEXP, SEXP VEC_LIDSEXP, SEXP VEC_PeakSummitSEXP, SEXP NGlobalInterPETsSEXP, SEXP NIntTagsloopSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Get_PETsInfoMat_fun_Rcpp_try(VEC_querySEXP, VEC_TypeSEXP, VEC_TagSEXP, VEC_LIDSEXP, VEC_PeakSummitSEXP, NGlobalInterPETsSEXP, NIntTagsloopSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Initiate_InteractionInfMat_fun_Rcpp
SEXP Initiate_InteractionInfMat_fun_Rcpp(Rcpp::NumericMatrix& InteractionInfMat, Rcpp::NumericMatrix& InteractionInfo, int& NPeaksInvolved, int& NInteractions);
static SEXP _MACPET_Initiate_InteractionInfMat_fun_Rcpp_try(SEXP InteractionInfMatSEXP, SEXP InteractionInfoSEXP, SEXP NPeaksInvolvedSEXP, SEXP NInteractionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type InteractionInfMat(InteractionInfMatSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type InteractionInfo(InteractionInfoSEXP);
    Rcpp::traits::input_parameter< int& >::type NPeaksInvolved(NPeaksInvolvedSEXP);
    Rcpp::traits::input_parameter< int& >::type NInteractions(NInteractionsSEXP);
    rcpp_result_gen = Rcpp::wrap(Initiate_InteractionInfMat_fun_Rcpp(InteractionInfMat, InteractionInfo, NPeaksInvolved, NInteractions));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Initiate_InteractionInfMat_fun_Rcpp(SEXP InteractionInfMatSEXP, SEXP InteractionInfoSEXP, SEXP NPeaksInvolvedSEXP, SEXP NInteractionsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Initiate_InteractionInfMat_fun_Rcpp_try(InteractionInfMatSEXP, InteractionInfoSEXP, NPeaksInvolvedSEXP, NInteractionsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Initiate_GenomeMap_fun_Rcpp
SEXP Initiate_GenomeMap_fun_Rcpp(int const& NPeaksInvolved_Net, Rcpp::NumericVector const& AdjNode_Net, Rcpp::NumericVector const& PBS_Net, Rcpp::NumericVector const& PeakSummit_Net, int const& Chrom12ID_Net);
static SEXP _MACPET_Initiate_GenomeMap_fun_Rcpp_try(SEXP NPeaksInvolved_NetSEXP, SEXP AdjNode_NetSEXP, SEXP PBS_NetSEXP, SEXP PeakSummit_NetSEXP, SEXP Chrom12ID_NetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int const& >::type NPeaksInvolved_Net(NPeaksInvolved_NetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type AdjNode_Net(AdjNode_NetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type PBS_Net(PBS_NetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type PeakSummit_Net(PeakSummit_NetSEXP);
    Rcpp::traits::input_parameter< int const& >::type Chrom12ID_Net(Chrom12ID_NetSEXP);
    rcpp_result_gen = Rcpp::wrap(Initiate_GenomeMap_fun_Rcpp(NPeaksInvolved_Net, AdjNode_Net, PBS_Net, PeakSummit_Net, Chrom12ID_Net));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Initiate_GenomeMap_fun_Rcpp(SEXP NPeaksInvolved_NetSEXP, SEXP AdjNode_NetSEXP, SEXP PBS_NetSEXP, SEXP PeakSummit_NetSEXP, SEXP Chrom12ID_NetSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Initiate_GenomeMap_fun_Rcpp_try(NPeaksInvolved_NetSEXP, AdjNode_NetSEXP, PBS_NetSEXP, PeakSummit_NetSEXP, Chrom12ID_NetSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Get_VectPosIndex_fun_Rcpp
int Get_VectPosIndex_fun_Rcpp(int& NPeaksInvolved, int& Nadj, int& Adj_i, int& Adj_j);
static SEXP _MACPET_Get_VectPosIndex_fun_Rcpp_try(SEXP NPeaksInvolvedSEXP, SEXP NadjSEXP, SEXP Adj_iSEXP, SEXP Adj_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int& >::type NPeaksInvolved(NPeaksInvolvedSEXP);
    Rcpp::traits::input_parameter< int& >::type Nadj(NadjSEXP);
    Rcpp::traits::input_parameter< int& >::type Adj_i(Adj_iSEXP);
    Rcpp::traits::input_parameter< int& >::type Adj_j(Adj_jSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_VectPosIndex_fun_Rcpp(NPeaksInvolved, Nadj, Adj_i, Adj_j));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Get_VectPosIndex_fun_Rcpp(SEXP NPeaksInvolvedSEXP, SEXP NadjSEXP, SEXP Adj_iSEXP, SEXP Adj_jSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Get_VectPosIndex_fun_Rcpp_try(NPeaksInvolvedSEXP, NadjSEXP, Adj_iSEXP, Adj_jSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Get_VectPosIndex_Vectorized_fun_Rcpp
SEXP Get_VectPosIndex_Vectorized_fun_Rcpp(int& NPeaksInvolved, int& Nadj, Rcpp::NumericVector const& Adj_i_vect, Rcpp::NumericVector const& Adj_j_vect);
static SEXP _MACPET_Get_VectPosIndex_Vectorized_fun_Rcpp_try(SEXP NPeaksInvolvedSEXP, SEXP NadjSEXP, SEXP Adj_i_vectSEXP, SEXP Adj_j_vectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int& >::type NPeaksInvolved(NPeaksInvolvedSEXP);
    Rcpp::traits::input_parameter< int& >::type Nadj(NadjSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type Adj_i_vect(Adj_i_vectSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type Adj_j_vect(Adj_j_vectSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_VectPosIndex_Vectorized_fun_Rcpp(NPeaksInvolved, Nadj, Adj_i_vect, Adj_j_vect));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Get_VectPosIndex_Vectorized_fun_Rcpp(SEXP NPeaksInvolvedSEXP, SEXP NadjSEXP, SEXP Adj_i_vectSEXP, SEXP Adj_j_vectSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Get_VectPosIndex_Vectorized_fun_Rcpp_try(NPeaksInvolvedSEXP, NadjSEXP, Adj_i_vectSEXP, Adj_j_vectSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Dijkstra_GSP_fun_Rcpp
SEXP Dijkstra_GSP_fun_Rcpp(int& src, Rcpp::List const& Network, int const& NPeaksInvolved);
static SEXP _MACPET_Dijkstra_GSP_fun_Rcpp_try(SEXP srcSEXP, SEXP NetworkSEXP, SEXP NPeaksInvolvedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int& >::type src(srcSEXP);
    Rcpp::traits::input_parameter< Rcpp::List const& >::type Network(NetworkSEXP);
    Rcpp::traits::input_parameter< int const& >::type NPeaksInvolved(NPeaksInvolvedSEXP);
    rcpp_result_gen = Rcpp::wrap(Dijkstra_GSP_fun_Rcpp(src, Network, NPeaksInvolved));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Dijkstra_GSP_fun_Rcpp(SEXP srcSEXP, SEXP NetworkSEXP, SEXP NPeaksInvolvedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Dijkstra_GSP_fun_Rcpp_try(srcSEXP, NetworkSEXP, NPeaksInvolvedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Save_BigMat_fun_Rcpp
void Save_BigMat_fun_Rcpp(SEXP& BigInfoMatDescInst, Rcpp::NumericVector const& GlobalNodesDist, int& k, int& StartInd, int& EndInd, Rcpp::NumericVector& InteractionPairs);
static SEXP _MACPET_Save_BigMat_fun_Rcpp_try(SEXP BigInfoMatDescInstSEXP, SEXP GlobalNodesDistSEXP, SEXP kSEXP, SEXP StartIndSEXP, SEXP EndIndSEXP, SEXP InteractionPairsSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP& >::type BigInfoMatDescInst(BigInfoMatDescInstSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type GlobalNodesDist(GlobalNodesDistSEXP);
    Rcpp::traits::input_parameter< int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< int& >::type StartInd(StartIndSEXP);
    Rcpp::traits::input_parameter< int& >::type EndInd(EndIndSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type InteractionPairs(InteractionPairsSEXP);
    Save_BigMat_fun_Rcpp(BigInfoMatDescInst, GlobalNodesDist, k, StartInd, EndInd, InteractionPairs);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Save_BigMat_fun_Rcpp(SEXP BigInfoMatDescInstSEXP, SEXP GlobalNodesDistSEXP, SEXP kSEXP, SEXP StartIndSEXP, SEXP EndIndSEXP, SEXP InteractionPairsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Save_BigMat_fun_Rcpp_try(BigInfoMatDescInstSEXP, GlobalNodesDistSEXP, kSEXP, StartIndSEXP, EndIndSEXP, InteractionPairsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Get_VijNet_fun_Rcpp
SEXP Get_VijNet_fun_Rcpp(Rcpp::NumericVector const& NiNjIndeces_Net, Rcpp::NumericVector const& NiNjMat, double& Nadj_Net, double& NPeaksInvolved_Net);
static SEXP _MACPET_Get_VijNet_fun_Rcpp_try(SEXP NiNjIndeces_NetSEXP, SEXP NiNjMatSEXP, SEXP Nadj_NetSEXP, SEXP NPeaksInvolved_NetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type NiNjIndeces_Net(NiNjIndeces_NetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type NiNjMat(NiNjMatSEXP);
    Rcpp::traits::input_parameter< double& >::type Nadj_Net(Nadj_NetSEXP);
    Rcpp::traits::input_parameter< double& >::type NPeaksInvolved_Net(NPeaksInvolved_NetSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_VijNet_fun_Rcpp(NiNjIndeces_Net, NiNjMat, Nadj_Net, NPeaksInvolved_Net));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Get_VijNet_fun_Rcpp(SEXP NiNjIndeces_NetSEXP, SEXP NiNjMatSEXP, SEXP Nadj_NetSEXP, SEXP NPeaksInvolved_NetSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Get_VijNet_fun_Rcpp_try(NiNjIndeces_NetSEXP, NiNjMatSEXP, Nadj_NetSEXP, NPeaksInvolved_NetSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Get_QCellPETCounts_fun_Rcpp
void Get_QCellPETCounts_fun_Rcpp(Rcpp::NumericVector const& BinsDij, int const& BinsDijSize, Rcpp::NumericVector const& BinsVij, int const& BinsVijSize, Rcpp::NumericMatrix const& ObsDVij, Rcpp::NumericMatrix& InteractionInfMat, Rcpp::NumericVector const& AllInteIndeces, Rcpp::NumericVector& QCellPETCountsDij, Rcpp::NumericVector& QCellPETCountsVij);
static SEXP _MACPET_Get_QCellPETCounts_fun_Rcpp_try(SEXP BinsDijSEXP, SEXP BinsDijSizeSEXP, SEXP BinsVijSEXP, SEXP BinsVijSizeSEXP, SEXP ObsDVijSEXP, SEXP InteractionInfMatSEXP, SEXP AllInteIndecesSEXP, SEXP QCellPETCountsDijSEXP, SEXP QCellPETCountsVijSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type BinsDij(BinsDijSEXP);
    Rcpp::traits::input_parameter< int const& >::type BinsDijSize(BinsDijSizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type BinsVij(BinsVijSEXP);
    Rcpp::traits::input_parameter< int const& >::type BinsVijSize(BinsVijSizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix const& >::type ObsDVij(ObsDVijSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type InteractionInfMat(InteractionInfMatSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type AllInteIndeces(AllInteIndecesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type QCellPETCountsDij(QCellPETCountsDijSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type QCellPETCountsVij(QCellPETCountsVijSEXP);
    Get_QCellPETCounts_fun_Rcpp(BinsDij, BinsDijSize, BinsVij, BinsVijSize, ObsDVij, InteractionInfMat, AllInteIndeces, QCellPETCountsDij, QCellPETCountsVij);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Get_QCellPETCounts_fun_Rcpp(SEXP BinsDijSEXP, SEXP BinsDijSizeSEXP, SEXP BinsVijSEXP, SEXP BinsVijSizeSEXP, SEXP ObsDVijSEXP, SEXP InteractionInfMatSEXP, SEXP AllInteIndecesSEXP, SEXP QCellPETCountsDijSEXP, SEXP QCellPETCountsVijSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Get_QCellPETCounts_fun_Rcpp_try(BinsDijSEXP, BinsDijSizeSEXP, BinsVijSEXP, BinsVijSizeSEXP, ObsDVijSEXP, InteractionInfMatSEXP, AllInteIndecesSEXP, QCellPETCountsDijSEXP, QCellPETCountsVijSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Get_QCellCombCounts_fun_Rcpp
void Get_QCellCombCounts_fun_Rcpp(int& ind, Rcpp::NumericVector const& BinsDij, int const& BinsDijSize, Rcpp::NumericVector const& BinsVij, int const& BinsVijSize, SEXP& BigInfoMatDescInst, Rcpp::NumericVector const& DkhOrder, Rcpp::NumericVector& QCellCombCountsDij_Net, Rcpp::NumericVector& QCellCombCountsVij_Net, int const& StartInd, int const& EndInd, Rcpp::NumericVector const& NiNjIndeces, Rcpp::NumericVector const& NiNjMat);
static SEXP _MACPET_Get_QCellCombCounts_fun_Rcpp_try(SEXP indSEXP, SEXP BinsDijSEXP, SEXP BinsDijSizeSEXP, SEXP BinsVijSEXP, SEXP BinsVijSizeSEXP, SEXP BigInfoMatDescInstSEXP, SEXP DkhOrderSEXP, SEXP QCellCombCountsDij_NetSEXP, SEXP QCellCombCountsVij_NetSEXP, SEXP StartIndSEXP, SEXP EndIndSEXP, SEXP NiNjIndecesSEXP, SEXP NiNjMatSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< int& >::type ind(indSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type BinsDij(BinsDijSEXP);
    Rcpp::traits::input_parameter< int const& >::type BinsDijSize(BinsDijSizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type BinsVij(BinsVijSEXP);
    Rcpp::traits::input_parameter< int const& >::type BinsVijSize(BinsVijSizeSEXP);
    Rcpp::traits::input_parameter< SEXP& >::type BigInfoMatDescInst(BigInfoMatDescInstSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type DkhOrder(DkhOrderSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type QCellCombCountsDij_Net(QCellCombCountsDij_NetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type QCellCombCountsVij_Net(QCellCombCountsVij_NetSEXP);
    Rcpp::traits::input_parameter< int const& >::type StartInd(StartIndSEXP);
    Rcpp::traits::input_parameter< int const& >::type EndInd(EndIndSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type NiNjIndeces(NiNjIndecesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector const& >::type NiNjMat(NiNjMatSEXP);
    Get_QCellCombCounts_fun_Rcpp(ind, BinsDij, BinsDijSize, BinsVij, BinsVijSize, BigInfoMatDescInst, DkhOrder, QCellCombCountsDij_Net, QCellCombCountsVij_Net, StartInd, EndInd, NiNjIndeces, NiNjMat);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Get_QCellCombCounts_fun_Rcpp(SEXP indSEXP, SEXP BinsDijSEXP, SEXP BinsDijSizeSEXP, SEXP BinsVijSEXP, SEXP BinsVijSizeSEXP, SEXP BigInfoMatDescInstSEXP, SEXP DkhOrderSEXP, SEXP QCellCombCountsDij_NetSEXP, SEXP QCellCombCountsVij_NetSEXP, SEXP StartIndSEXP, SEXP EndIndSEXP, SEXP NiNjIndecesSEXP, SEXP NiNjMatSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Get_QCellCombCounts_fun_Rcpp_try(indSEXP, BinsDijSEXP, BinsDijSizeSEXP, BinsVijSEXP, BinsVijSizeSEXP, BigInfoMatDescInstSEXP, DkhOrderSEXP, QCellCombCountsDij_NetSEXP, QCellCombCountsVij_NetSEXP, StartIndSEXP, EndIndSEXP, NiNjIndecesSEXP, NiNjMatSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Assess_Interaction_fun_Rcpp
SEXP Assess_Interaction_fun_Rcpp(int& CurInt, Rcpp::NumericMatrix& InteractionInfMat, Rcpp::Function& Poiss_fun, Rcpp::NumericMatrix const& BinMatDij, Rcpp::NumericMatrix const& BinMatVij);
static SEXP _MACPET_Assess_Interaction_fun_Rcpp_try(SEXP CurIntSEXP, SEXP InteractionInfMatSEXP, SEXP Poiss_funSEXP, SEXP BinMatDijSEXP, SEXP BinMatVijSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int& >::type CurInt(CurIntSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type InteractionInfMat(InteractionInfMatSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function& >::type Poiss_fun(Poiss_funSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix const& >::type BinMatDij(BinMatDijSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix const& >::type BinMatVij(BinMatVijSEXP);
    rcpp_result_gen = Rcpp::wrap(Assess_Interaction_fun_Rcpp(CurInt, InteractionInfMat, Poiss_fun, BinMatDij, BinMatVij));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Assess_Interaction_fun_Rcpp(SEXP CurIntSEXP, SEXP InteractionInfMatSEXP, SEXP Poiss_funSEXP, SEXP BinMatDijSEXP, SEXP BinMatVijSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Assess_Interaction_fun_Rcpp_try(CurIntSEXP, InteractionInfMatSEXP, Poiss_funSEXP, BinMatDijSEXP, BinMatVijSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Update_ToBeAddedInter_fun_Rcpp
void Update_ToBeAddedInter_fun_Rcpp(Rcpp::NumericMatrix& InteractionInfMat, int& k, int& h, int& i, int& TR_Si, Rcpp::NumericVector& LastInteractions, int& Chrom12ID_i);
static SEXP _MACPET_Update_ToBeAddedInter_fun_Rcpp_try(SEXP InteractionInfMatSEXP, SEXP kSEXP, SEXP hSEXP, SEXP iSEXP, SEXP TR_SiSEXP, SEXP LastInteractionsSEXP, SEXP Chrom12ID_iSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type InteractionInfMat(InteractionInfMatSEXP);
    Rcpp::traits::input_parameter< int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< int& >::type h(hSEXP);
    Rcpp::traits::input_parameter< int& >::type i(iSEXP);
    Rcpp::traits::input_parameter< int& >::type TR_Si(TR_SiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type LastInteractions(LastInteractionsSEXP);
    Rcpp::traits::input_parameter< int& >::type Chrom12ID_i(Chrom12ID_iSEXP);
    Update_ToBeAddedInter_fun_Rcpp(InteractionInfMat, k, h, i, TR_Si, LastInteractions, Chrom12ID_i);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Update_ToBeAddedInter_fun_Rcpp(SEXP InteractionInfMatSEXP, SEXP kSEXP, SEXP hSEXP, SEXP iSEXP, SEXP TR_SiSEXP, SEXP LastInteractionsSEXP, SEXP Chrom12ID_iSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Update_ToBeAddedInter_fun_Rcpp_try(InteractionInfMatSEXP, kSEXP, hSEXP, iSEXP, TR_SiSEXP, LastInteractionsSEXP, Chrom12ID_iSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Check_BiProd_fun_Rcpp
SEXP Check_BiProd_fun_Rcpp(Rcpp::NumericMatrix& InteractionInfMat, int& k, int& h, Rcpp::NumericVector& AllInteIndeces, double& TotBiRem, int& Chrom12ID_i);
static SEXP _MACPET_Check_BiProd_fun_Rcpp_try(SEXP InteractionInfMatSEXP, SEXP kSEXP, SEXP hSEXP, SEXP AllInteIndecesSEXP, SEXP TotBiRemSEXP, SEXP Chrom12ID_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type InteractionInfMat(InteractionInfMatSEXP);
    Rcpp::traits::input_parameter< int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< int& >::type h(hSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type AllInteIndeces(AllInteIndecesSEXP);
    Rcpp::traits::input_parameter< double& >::type TotBiRem(TotBiRemSEXP);
    Rcpp::traits::input_parameter< int& >::type Chrom12ID_i(Chrom12ID_iSEXP);
    rcpp_result_gen = Rcpp::wrap(Check_BiProd_fun_Rcpp(InteractionInfMat, k, h, AllInteIndeces, TotBiRem, Chrom12ID_i));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Check_BiProd_fun_Rcpp(SEXP InteractionInfMatSEXP, SEXP kSEXP, SEXP hSEXP, SEXP AllInteIndecesSEXP, SEXP TotBiRemSEXP, SEXP Chrom12ID_iSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Check_BiProd_fun_Rcpp_try(InteractionInfMatSEXP, kSEXP, hSEXP, AllInteIndecesSEXP, TotBiRemSEXP, Chrom12ID_iSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Get_InteractionInfo_fun_Rcpp
SEXP Get_InteractionInfo_fun_Rcpp(Rcpp::NumericMatrix& InteractionInfMat, int& NInteractions);
static SEXP _MACPET_Get_InteractionInfo_fun_Rcpp_try(SEXP InteractionInfMatSEXP, SEXP NInteractionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type InteractionInfMat(InteractionInfMatSEXP);
    Rcpp::traits::input_parameter< int& >::type NInteractions(NInteractionsSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_InteractionInfo_fun_Rcpp(InteractionInfMat, NInteractions));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _MACPET_Get_InteractionInfo_fun_Rcpp(SEXP InteractionInfMatSEXP, SEXP NInteractionsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_MACPET_Get_InteractionInfo_fun_Rcpp_try(InteractionInfMatSEXP, NInteractionsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _MACPET_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("SEXP(*Get_PETsInfoMat_fun_Rcpp)(Rcpp::NumericVector const&,Rcpp::NumericVector const&,Rcpp::NumericVector const&,Rcpp::NumericVector const&,Rcpp::NumericVector const&,int const&,int const&)");
        signatures.insert("SEXP(*Initiate_InteractionInfMat_fun_Rcpp)(Rcpp::NumericMatrix&,Rcpp::NumericMatrix&,int&,int&)");
        signatures.insert("SEXP(*Initiate_GenomeMap_fun_Rcpp)(int const&,Rcpp::NumericVector const&,Rcpp::NumericVector const&,Rcpp::NumericVector const&,int const&)");
        signatures.insert("int(*Get_VectPosIndex_fun_Rcpp)(int&,int&,int&,int&)");
        signatures.insert("SEXP(*Get_VectPosIndex_Vectorized_fun_Rcpp)(int&,int&,Rcpp::NumericVector const&,Rcpp::NumericVector const&)");
        signatures.insert("SEXP(*Dijkstra_GSP_fun_Rcpp)(int&,Rcpp::List const&,int const&)");
        signatures.insert("void(*Save_BigMat_fun_Rcpp)(SEXP&,Rcpp::NumericVector const&,int&,int&,int&,Rcpp::NumericVector&)");
        signatures.insert("SEXP(*Get_VijNet_fun_Rcpp)(Rcpp::NumericVector const&,Rcpp::NumericVector const&,double&,double&)");
        signatures.insert("void(*Get_QCellPETCounts_fun_Rcpp)(Rcpp::NumericVector const&,int const&,Rcpp::NumericVector const&,int const&,Rcpp::NumericMatrix const&,Rcpp::NumericMatrix&,Rcpp::NumericVector const&,Rcpp::NumericVector&,Rcpp::NumericVector&)");
        signatures.insert("void(*Get_QCellCombCounts_fun_Rcpp)(int&,Rcpp::NumericVector const&,int const&,Rcpp::NumericVector const&,int const&,SEXP&,Rcpp::NumericVector const&,Rcpp::NumericVector&,Rcpp::NumericVector&,int const&,int const&,Rcpp::NumericVector const&,Rcpp::NumericVector const&)");
        signatures.insert("SEXP(*Assess_Interaction_fun_Rcpp)(int&,Rcpp::NumericMatrix&,Rcpp::Function&,Rcpp::NumericMatrix const&,Rcpp::NumericMatrix const&)");
        signatures.insert("void(*Update_ToBeAddedInter_fun_Rcpp)(Rcpp::NumericMatrix&,int&,int&,int&,int&,Rcpp::NumericVector&,int&)");
        signatures.insert("SEXP(*Check_BiProd_fun_Rcpp)(Rcpp::NumericMatrix&,int&,int&,Rcpp::NumericVector&,double&,int&)");
        signatures.insert("SEXP(*Get_InteractionInfo_fun_Rcpp)(Rcpp::NumericMatrix&,int&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _MACPET_RcppExport_registerCCallable() { 
    R_RegisterCCallable("MACPET", "_MACPET_Get_PETsInfoMat_fun_Rcpp", (DL_FUNC)_MACPET_Get_PETsInfoMat_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Initiate_InteractionInfMat_fun_Rcpp", (DL_FUNC)_MACPET_Initiate_InteractionInfMat_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Initiate_GenomeMap_fun_Rcpp", (DL_FUNC)_MACPET_Initiate_GenomeMap_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Get_VectPosIndex_fun_Rcpp", (DL_FUNC)_MACPET_Get_VectPosIndex_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Get_VectPosIndex_Vectorized_fun_Rcpp", (DL_FUNC)_MACPET_Get_VectPosIndex_Vectorized_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Dijkstra_GSP_fun_Rcpp", (DL_FUNC)_MACPET_Dijkstra_GSP_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Save_BigMat_fun_Rcpp", (DL_FUNC)_MACPET_Save_BigMat_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Get_VijNet_fun_Rcpp", (DL_FUNC)_MACPET_Get_VijNet_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Get_QCellPETCounts_fun_Rcpp", (DL_FUNC)_MACPET_Get_QCellPETCounts_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Get_QCellCombCounts_fun_Rcpp", (DL_FUNC)_MACPET_Get_QCellCombCounts_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Assess_Interaction_fun_Rcpp", (DL_FUNC)_MACPET_Assess_Interaction_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Update_ToBeAddedInter_fun_Rcpp", (DL_FUNC)_MACPET_Update_ToBeAddedInter_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Check_BiProd_fun_Rcpp", (DL_FUNC)_MACPET_Check_BiProd_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_Get_InteractionInfo_fun_Rcpp", (DL_FUNC)_MACPET_Get_InteractionInfo_fun_Rcpp_try);
    R_RegisterCCallable("MACPET", "_MACPET_RcppExport_validate", (DL_FUNC)_MACPET_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_MACPET_FilterFastqYield_fun_Rcpp", (DL_FUNC) &_MACPET_FilterFastqYield_fun_Rcpp, 10},
    {"_MACPET_FitCallLocal_fun_Rcpp", (DL_FUNC) &_MACPET_FitCallLocal_fun_Rcpp, 2},
    {"_MACPET_Get_PETsInfoMat_fun_Rcpp", (DL_FUNC) &_MACPET_Get_PETsInfoMat_fun_Rcpp, 7},
    {"_MACPET_Initiate_InteractionInfMat_fun_Rcpp", (DL_FUNC) &_MACPET_Initiate_InteractionInfMat_fun_Rcpp, 4},
    {"_MACPET_Initiate_GenomeMap_fun_Rcpp", (DL_FUNC) &_MACPET_Initiate_GenomeMap_fun_Rcpp, 5},
    {"_MACPET_Get_VectPosIndex_fun_Rcpp", (DL_FUNC) &_MACPET_Get_VectPosIndex_fun_Rcpp, 4},
    {"_MACPET_Get_VectPosIndex_Vectorized_fun_Rcpp", (DL_FUNC) &_MACPET_Get_VectPosIndex_Vectorized_fun_Rcpp, 4},
    {"_MACPET_Dijkstra_GSP_fun_Rcpp", (DL_FUNC) &_MACPET_Dijkstra_GSP_fun_Rcpp, 3},
    {"_MACPET_Save_BigMat_fun_Rcpp", (DL_FUNC) &_MACPET_Save_BigMat_fun_Rcpp, 6},
    {"_MACPET_Get_VijNet_fun_Rcpp", (DL_FUNC) &_MACPET_Get_VijNet_fun_Rcpp, 4},
    {"_MACPET_Get_QCellPETCounts_fun_Rcpp", (DL_FUNC) &_MACPET_Get_QCellPETCounts_fun_Rcpp, 9},
    {"_MACPET_Get_QCellCombCounts_fun_Rcpp", (DL_FUNC) &_MACPET_Get_QCellCombCounts_fun_Rcpp, 13},
    {"_MACPET_Assess_Interaction_fun_Rcpp", (DL_FUNC) &_MACPET_Assess_Interaction_fun_Rcpp, 5},
    {"_MACPET_Update_ToBeAddedInter_fun_Rcpp", (DL_FUNC) &_MACPET_Update_ToBeAddedInter_fun_Rcpp, 7},
    {"_MACPET_Check_BiProd_fun_Rcpp", (DL_FUNC) &_MACPET_Check_BiProd_fun_Rcpp, 6},
    {"_MACPET_Get_InteractionInfo_fun_Rcpp", (DL_FUNC) &_MACPET_Get_InteractionInfo_fun_Rcpp, 2},
    {"_MACPET_RcppExport_registerCCallable", (DL_FUNC) &_MACPET_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_MACPET(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
